PROJECT_ROOT=$(shell pwd)
PROJECT_NAME=plugin_$(shell pwd | awk -F '/' '{print $$NF}')
#PROJECT_NAME=plugin_$(shell pwd | awk -F '/' '{print $$NF}')
SOLUTION_ROOT ?= $(shell cd $(PROJECT_ROOT)/../../../.. && pwd && cd $(PROJECT_ROOT))
TEMP_ROOT ?= $(SOLUTION_ROOT)/temp/$(PROJECT_NAME)
INCLUDE_ROOT ?= /data/work_git/serverbase/include
USERV_INC=$(INCLUDE_ROOT)/userv
LIB_DIR ?= /data/work_git/serverbase/lib
BIN_DIR ?= $(SOLUTION_ROOT)/bin
PROTOBUF_INC ?= $(PROTOBUF_HOME)/include
PROTOBUF_LIB ?= $(PROTOBUF_HOME)/lib
MYSQL_INC ?= /usr/include/mysql
MYSQL_LIB ?= /usr/lib64/mysql
PROTO_ROOT ?=./proto
PROTOCOL_ROOT ?= ./protocol
INTERFACE_ROOT ?= $(shell cd $(PROJECT_ROOT)/../.. && pwd && cd $(PROJECT_ROOT) )


## 以下为获取版本号信息 ##
VERSION_FILE = ./version.txt
MAJOR_VER = $(shell awk -F '.' '{print $$1}' $(VERSION_FILE) )
MINOR_VER = $(shell awk -F '.' '{print $$2}' $(VERSION_FILE) )
BUILD_VER = $(shell awk -F '.' '{print $$3}' $(VERSION_FILE) )
GIT_VER = $(shell git show -s --pretty=format:%h)
#SVN_VER = $(shell svn info | grep "^版本:" | awk '{print $$2}' )
KERNEL_VER = $(shell uname -r | awk -F '.' '{print $$(NF-1)}')
PROCESS_VER = $(shell uname -p)
NEXT_BUILD_VER = $(shell let v1=$(BUILD_VER); let v2=$$v1+1; echo $$v2)
SO_NEXT_VERSION = $(MAJOR_VER).$(MINOR_VER).$(NEXT_BUILD_VER)
SO_CUR_VERSION = $(MAJOR_VER).$(MINOR_VER).$(BUILD_VER)
SO_BUILD_VERSION = $(SO_NEXT_VERSION).$(KERNEL_VER).$(PROCESS_VER)
SO_INST_VERSION = $(SO_CUR_VERSION).$(KERNEL_VER).$(PROCESS_VER)

## 判断代码是否有修改或新增
CHANGE_SOURCE := $(shell git status -s ./ | grep -E "\.cpp|\.C\.cc\.h" | grep -E "^ M|^ A|^ R" | awk '{print $$2}')
CHANGE_SOURCE_COUNT := $(shell git status -s ./ | grep -E "\.cpp|\.C\.cc\.h" | grep -E "^ M|^ A|^ R" | wc -l )

ifneq ($(SOURCE_CHANGE_COUNT), 0)
SOURCE_CHANGED := 1
endif

## 判断GCC版本是否支持C11
GCC_VERSION5 := $(shell expr `gcc -dumpversion | awk -F '.' '{print $$1}'` \> 4)
GCC_VERSION4 := $(shell expr `gcc -dumpversion | awk -F '.' '{print $$1}'` \= 4)
GCC_SUBVERSION := $(shell expr `gcc -dumpversion | awk -F '.' '{print $$2}'` \>= 7)
ifeq ($(GCC_VERSION5), 1)
C11_SUPPORT := 1
else ifeq ($(GCC_VERSION4)_$(GCC_SUBVERSION), 1_1)
C11_SUPPORT := 1
endif

### C compiler flags
CC=gcc
EXTRA_FLAGS = -fPIC -ggdb3 
ifdef C11_SUPPORT
CFLAGS=-std=gnu++11
endif
CFLAGS+=-Wall -O2 $(EXTRA_FLAGS) -I$(INCLUDE_ROOT) -I$(PROTOBUF_INC) -I$(MYSQL_INC) -I$(INTERFACE_ROOT) -I$(USERV_INC)

### C++ compiler flags
CXX=g++
CPPFLAGS = -Wl,--as-needed -shared -fPIC
CXXFLAGS = $(CPPFLAGS) $(CFLAGS)

### link flags
LINKCC=$(CC)
ARFLAGS=rc
LDFLAGS=-lstdc++ -lUtility -lProtoBase -lNetWork -lSecurity -lDatabase -lBaseCode
LDFLAGS+=-lhiredis -lmysqlclient -lprotobuf -liconv -lcurl -lpcrecpp 
LDFLAGS+=-lpthread -ldl -lutil -lssl -lcrypto -lz -lrt -lm
## LDLIBS += -L $(LIB_DIR) -L .
LDLIBS += -L . -L$(LIB_DIR) -L$(PROTOBUF_LIB) -L$(MYSQL_LIB) -L$(REDIS_HOME)/lib
XLDFLAGS=$(LDLIBS) $(LDFLAGS)

# SOFLAGS  =-lstdc++ -shared -fPIC

### 编译环境变量定义
CROSS_COMPILE=
AS     = $(CROSS_COMPILE)as
LD     = $(CROSS_COMPILE)ld
CC     = $(CROSS_COMPILE)gcc
CPP    = $(CC) -E
AR     = $(CROSS_COMPILE)ar
NM     = $(CROSS_COMPILE)nm
STRIP  = $(CROSS_COMPILE)strip
RANLIB = $(CROSS_COMPILE)ranlib

### 本机相关命令
CP     := cp
RM     := rm
MKDIR  := mkdir
SED    := sed
FIND   := find
XARGS  := xargs

#####################################################################

DIRS_1 := . protocol
DIRS_2 := $(foreach dir, $(DIRS_1), $(PROJECT_ROOT)/$(dir))
DIRS   := $(subst /.,,$(DIRS_2))
SRCS := $(foreach dir, $(DIRS), $(wildcard $(dir)/*.c)) \
		$(foreach dir, $(DIRS), $(wildcard $(dir)/*.cc)) \
		$(foreach dir, $(DIRS), $(wildcard $(dir)/*.C)) \
		$(foreach dir, $(DIRS), $(wildcard $(dir)/*.cpp)) 
OBJS := $(patsubst %.c,   %.o, $(foreach dir, $(DIRS), $(wildcard $(dir)/*.c))) \
		$(patsubst %.cc,  %.o, $(foreach dir, $(DIRS), $(wildcard $(dir)/*.cc))) \
		$(patsubst %.C,   %.o, $(foreach dir, $(DIRS), $(wildcard $(dir)/*.C))) \
		$(patsubst %.cpp, %.o, $(foreach dir, $(DIRS), $(wildcard $(dir)/*.cpp)))
OBJS_1 := $(subst $(PROJECT_ROOT)/,,$(OBJS))
OBJS_2 := $(foreach obj, $(OBJS_1), $(TEMP_ROOT)/$(obj))

ALL_DIRS := $(DIRS)
ALL_OBJS := $(subst ./,,$(OBJS_2)) 
ALL_DEPS := $(patsubst %.o, %.d, $(ALL_OBJS))

#####################################################################
### dependencys file build rules

$(TEMP_ROOT)/%.d: %.c
	@[ ! -d $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@)) ] & $(MKDIR) -p $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@))
	$(CC) -MM $(CFLAGS) $< > $@
	$(CC) -MM $(CFLAGS) $< | sed s/\\.o/.d/ > $@

$(TEMP_ROOT)/%.d: %.cc
	@[ ! -d $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@)) ] & $(MKDIR) -p $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@))
	$(CXX) -MM $(CXXFLAGS) $< > $@
	$(CXX) -MM $(CXXFLAGS) $< | sed s/\\.o/.d/ > $@

$(TEMP_ROOT)/%.d: %.cpp
	@[ ! -d $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@)) ] & $(MKDIR) -p $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@))
	$(CXX) -MM $(CXXFLAGS) $< > $@
	$(CXX) -MM $(CXXFLAGS) $< | sed s/\\.o/.d/ > $@

$(TEMP_ROOT)/%.d: %.C
	@[ ! -d $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@)) ] & $(MKDIR) -p $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@))
	$(CXX) -MM $(CXXFLAGS) $< > $@
	$(CXX) -MM $(CXXFLAGS) $< | sed s/\\.o/.d/ > $@ 


#####################################################################
### object files build rules

$(TEMP_ROOT)/%.o: %.c
	@[ ! -d $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@)) ] & $(MKDIR) -p $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@))
	$(CC) $(CFLAGS) -o $@ -c $<

$(TEMP_ROOT)/%.o: %.cc
	@[ ! -d $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@)) ] & $(MKDIR) -p $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@))
	$(CXX) $(CXXFLAGS) -o $@ -c $<

$(TEMP_ROOT)/%.o: %.cpp
	@[ ! -d $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@)) ] & $(MKDIR) -p $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@))
	$(CXX) $(CXXFLAGS) -o $@ -c $<

$(TEMP_ROOT)/%.o: %.C
	@[ ! -d $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@)) ] & $(MKDIR) -p $(dir $(subst $(ALL_DIRS), $(TEMP_ROOT), $@))
	$(CXX) $(CXXFLAGS) -o $@ -c $<


#####################################################################
### user defines
all: buildver plugin
buildver:
	@echo $(SO_NEXT_VERSION) > $(VERSION_FILE)

plugin: $(ALL_OBJS) 
	@echo ">>>>>> begin to compile $(PROJECT_NAME)..."
	$(LINKCC) $(CXXFLAGS) $^ -o $(PROJECT_NAME).so.$(SO_INST_VERSION) $(XLDFLAGS)
	ldd -r $(PROJECT_NAME).so.$(SO_INST_VERSION)

install: dist

DIST_ROOT = /data/work/userver/v0.2/plugins
dist:
	-@\cp -f $(PROJECT_NAME).so.$(SO_INST_VERSION) $(DIST_ROOT)/

clean:
	-$(RM) -r -f $(TEMP_ROOT)
	-$(RM) plugin_*

explain:
	@echo "The following information repressents you program:"
	@echo "Solution Dir : $(SOLUTION_ROOT)"
	@echo "Project Dir  : $(PROJECT_ROOT)" 
	@echo "Temp dir     : $(TEMP_ROOT)"
	@echo "Source dir   : $(DIRS)"
	@echo "Source files : $(SRCS)"
	@echo "Object files : $(ALL_OBJS)"
	@echo "Dependency files : $(ALL_DEPS)"
	@echo ".so current ver  : $(SO_CUR_VERSION)"
	@echo ".so next ver     : $(SO_NEXT_VERSION)"
	@echo ".so build ver    : $(SO_BUILD_VERSION)"
	@echo ".so install ver  : $(SO_INST_VERSION)"

depend: $(ALL_DEPS)
	@echo "Dependencies are now up-to-date."

-include $(ALL_DEPS)
